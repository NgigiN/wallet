name: Deploy to Server

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: false

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          cd /home/deploy/opt/wallet
          git pull origin main

          # Create deployment lock to prevent concurrent deployments
          LOCK_FILE="/tmp/financial-tracker-deploy.lock"
          if [ -f "$LOCK_FILE" ]; then
            echo "⏳ Another deployment is in progress, waiting..."
            while [ -f "$LOCK_FILE" ]; do
              sleep 5
            done
          fi
          echo $$ > "$LOCK_FILE"
          trap 'rm -f "$LOCK_FILE"' EXIT

          # Stop existing process if running
          if pgrep -f financial-tracker > /dev/null; then
            echo "🛑 Stopping existing financial-tracker process"
            pkill -f financial-tracker
            sleep 3
            # Force kill if still running
            if pgrep -f financial-tracker > /dev/null; then
              echo "🔨 Force killing financial-tracker process"
              pkill -9 -f financial-tracker
              sleep 2
            fi
          else
            echo "ℹ️  No existing financial-tracker process found"
          fi

          # Load environment variables from .env file
          if [ -f ".env" ]; then
            echo "📄 Loading environment variables from .env file"
            export $(cat .env | grep -v '^#' | xargs)
          else
            echo "❌ .env file not found"
            exit 1
          fi

          # Check if environment variables are set
          if [ -z "$DISCORD_BOT_TOKEN" ] || [ -z "$DISCORD_CHANNEL_ID" ]; then
            echo "❌ Environment variables not set. Please check .env file"
            echo "Current values:"
            echo "DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN:0:10}..."
            echo "DISCORD_CHANNEL_ID: $DISCORD_CHANNEL_ID"
            exit 1
          fi

          # Build the application
          go build -o financial-tracker ./cmd

          # Start the application in a new session to prevent it from being killed
          echo "🚀 Starting financial-tracker in detached session..."
          setsid ./financial-tracker > app.log 2>&1 < /dev/null &

          # Get the process ID immediately
          APP_PID=$!
          echo "📋 Process started with PID: $APP_PID"

          # Wait a moment and check if it's running
          sleep 5
          if pgrep -f financial-tracker > /dev/null; then
            echo "✅ Application started successfully"
            echo "Process ID: $(pgrep -f financial-tracker)"
            echo "Health check:"
            curl -s http://localhost:8080/health || echo "Health endpoint not responding"
            echo "📊 Process status:"
            ps aux | grep financial-tracker | grep -v grep
          else
            echo "❌ Application failed to start"
            echo "Recent logs:"
            tail -20 app.log
            echo "🔍 Checking if process exists:"
            ps aux | grep financial-tracker
            exit 1
          fi
